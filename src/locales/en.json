{
  "home-title": "Accessibility testing",
  "getstarted": "GET STARTED",
  "learnmore": "LEARN MORE",
  "library-title": "Accessible components library",
  "library-content": "Introducing the Accessible Components Library, your go-to resource for inclusive web development. Explore our wide range of accessibility-focused components designed to enhance user experience. Build an inclusive digital world with the Accessible Components Library.",
  "backtop": "Back to the top",
  "nav-home": "Home",
  "nav-about": "About",
  "main-content-button": "Main content",
  "about-us": "About us",
  "previous": "Previous",
  "next": "Next",
  "start": "Start",
  "return-home": "Return to home",
  "article-title": "This is a testing zone",
  "fake-title": "And it is not accessible !",
  "true-title": "And it is accessible !",
  "first-name": "First Name",
  "last-name": "Last Name",
  "message": "Hello there !",
  "city": "City",
  "state": "State",
  "zip": "Zip",
  "send": "Send Form",
  "image-error": "This image do not have the following attributes: alt='' aria-hidden='true' role='presentation'.",
  "images-error": "Images do not have the following attributes: alt='' aria-hidden='true' role='presentation'.",
  "form-error": "The tags used in the form are not semantically correct. For example there is no label tags wrapped around the input tags.",
  "select-error": "The select menu doesn't have the aria-expanded attribute.",
  "title-error": "The semantic hierarchy of title tags is inconsistent.",
  "stepper-error": "Buttons have no aria-label or type attribute, and cannot be moved by keyboard keys. And images do not have the following attributes: alt='' aria-hidden='true' role='presentation'.",
  "image-right": "This image has the following attributes: alt='', aria-hidden='true', and role='presentation'.",
  "images-right": "Images have the following attributes: alt='', aria-hidden='true', and role='presentation'.",
  "form-right": "The tags used in the form are semantically correct. For example, there are label tags wrapped around the input tags.",
  "select-right": "The select menu has the aria-expanded attribute.",
  "title-right": "The semantic hierarchy of title tags is consistent.",
  "stepper-right": "Buttons have the aria-label or type attribute, and can be moved by keyboard keys. Additionally, images have the following attributes: alt='', aria-hidden='true', and role='presentation'.",
  "close": "Close",
  "open": "Open",
  "inolib": "Inolib is a digital agency specializing in digital accessibility, whose mission is to make the digital world accessible to all. Since its creation in 2022, Inolib has been designing, developing and marketing solutions and services to promote digital inclusion. The agency is deeply committed to the social economy, combining economic performance with social impact.",
  "step-1": "Welcome to our accessible component testing area! This area is designed to allow you to explore and test the accessibility of an application's components. Today, we're going to present you with two pages: one with non-accessible components and another with accessible components. Ready to get started?",
  "step-2": "On the first test page, you'll see components that aren't accessible to the disabled. Next to each component, a '! Click on it to find out more. Use a screen reader (NVDA or JAWS) and test keyboard navigation with TAB, right/left arrows.",
  "step-3": "When you click on the 'Details' button of a component that is not accessible, you'll see a detailed explanation of why the component is problematic.",
  "step-4": "Now let's move on to the second page, where you'll find components specially designed to be accessible to all users. Interact with these components to see how they are designed to provide an inclusive experience for all.",
  "code-pres": "This code is designed to make your website accessible to users, including those with visual or motor limitations. Good accessibility practices have been taken into account in order to an inclusive experience for all users. Here's how it's done: ",
  "lnav-1": "Use of semantic tags: The tags used, such as <nav>, <ul>, <li>, and <a>, have specific meanings for screen readers and other assistive technologies. They help users understand the structure and functionality of the navigation bar.",
  "lnav-2": "Keyboard-accessible controls: Users who can't use a mouse or touchscreen can navigate the navigation bar using the keyboard. Interactive elements, such as buttons and links, are designed to be activated by pressing the Enter or Space key when highlighted.",
  "lnav-3": "Visual contrast: The colors used for the text and background of the navigation bar have been chosen to offer good contrast, facilitating legibility for people with reduced vision or color sensitivity.",
  "lnav-4": "Menu status management: When you click on the hamburger icon, the menu opens and closes. This feature allows users to understand whether the menu is open or closed, even if they can't see the icon.",
  "limg-1": "Decorative images have empty alt, role 'presentation', aria-hidden 'true'. Informative images have a detailed alt.",
  "limg-2": "Functional images are used to trigger actions rather than to convey information. They are used in buttons, links and other interactive elements. The image alt should indicate the action that will be triggered, rather than a description of the image.",
  "limg-3": "Text images have an alt corresponding to the text marked on the image.",
  "limg-4": "And complex images, like graphics, have an alt that describes the thing in the image in detail.",
  "larticle-1": "HTML tags are used appropriately: The code uses semantic tags such as <article>, <section>, <h1>, <h2>, <p>, etc., which improves accessibility for screen readers and makes it easier for all users to understand the page structure.",
  "larticle-2": "Alt and aria-hidden attributes are used for images: Images included in the code have alt and aria-hidden attributes defined, enabling screen readers to understand the content of images and ignore them when they are not relevant to the context.",
  "larticle-3": "CSS classes are used adaptively: The code uses adaptive CSS classes, such as md:mt-0, sm:px-6, lg:px-8, etc., which allow the style to be modified according to screen size. This ensures that content remains readable and well laid out on different devices and screen resolutions.",
  "larticle-4": "Consistent reading structure: The code follows a logical reading structure with appropriate tags for headings, subheadings and paragraphs. This facilitates navigation and content comprehension for users who depend on the page structure to access information.",
  "lstep-1": "The code uses accessibility attributes such as role, aria-roledescription and aria-label to describe elements and provide information to assistive technologies.",
  "lstep-2": "It handles keyboard focus using onKeyDown events and a custom horizontalFocus function, allowing users to navigate tutorial steps using the keyboard.",
  "lstep-3": "The images used in the tutorial are accompanied by an alt attribute that provides an alternative description for users who can't see the image.",
  "lstep-4": "The code uses tabIndex attributes to make the tutorial buttons accessible from the keyboard. By assigning a value of 0 to tabIndex, the buttons become focusable and can be activated by pressing the Enter key or the space bar. This allows users who can't use the mouse to navigate and interact with the tutorial buttons using only the keyboard.",
  "lform-1": "Form elements (<input> tags, <textarea>, <select>, etc.) are all associated with appropriate labels (<label>) using the htmlFor attribute (or for in HTML), enabling screen readers to associate them correctly and announce the corresponding label when a form element receives focus.",
  "lform-2": "Labels are written in a descriptive style, making them easy to understand for users with reading or vision difficulties.",
  "lform-3": "Form controls have appropriate styles and attributes (aria-*) to provide visual and contextual clues for users, especially those using screen readers.",
  "lform-4": "Buttons have explicit text and appropriate CSS classes to indicate their role (for example, the 'send' button clearly indicates its purpose).",
  "lswitch-1": "Appropriate use of roles and ARIA attributes: The button in this code uses ARIA (Accessible Rich Internet Applications) attributes to enhance accessibility. The role='switch' attribute indicates that the button acts like a switch. The attribute aria-checked={isChecked} is used to indicate the current state of the switch, based on the value of isChecked.",
  "lswitch-2": "Keyboard management: the onKeyDown event is used to detect the keyboard keys pressed by the user. If the user presses the Enter key or the Space key, the handleSwitch function is called to change the state of the switch.",
  "lswitch-3": "Alternative text: The aria-label attribute provides alternative text for the switch, which is useful for screen readers or other assistive technology.",
  "lswitch-4": "Distinct visual styles for states: Conditional CSS classes are used to apply distinct visual styles depending on the state of the switch. This allows visually impaired users to clearly distinguish the current state of the switch.",
  "ltabs-1": "Use of role and aria-* attributes: The HTML tags used, such as role and aria-*, allow for the addition of accessible attributes to interactive elements like tabs and panels, providing additional information to assistive technologies used by people with disabilities.",
  "ltabs-2": "Focus management: The code uses a custom hook called useFocus to manage keyboard focus on the tabs. This ensures that users can easily navigate between tabs using the keyboard, which is essential for people with dexterity limitations or who are unable to use a mouse.",
  "ltabs-3": "Use of state: The code uses the useState hook to manage the state of the active tab. This allows for dynamically updating the displayed content based on the tab selected by the user.",
  "ltabs-4": "Use of refs: The code uses refs to capture the button elements of the tabs. This allows them to be associated with event handling functions, such as click handling and keyboard navigation. Refs are also useful for accessing DOM elements and performing specific actions on them.",
  "lmodal-1": "The aria-labelledby and aria-describedby attributes are used to provide a textual description of the dialog element, allowing assistive technology users to understand the content and purpose of the dialog.",
  "lmodal-2": "The useEscapeKey function is used to detect when the user presses the Escape key, allowing them to close the dialog. This is beneficial for users who may not be able to use a mouse or prefer keyboard navigation.",
  "lmodal-3": "The useOuterClick function is used to detect when the user clicks outside the dialog, also allowing it to be closed. This improves the user experience by providing multiple ways to close the dialog, whether it's by pressing Escape or clicking outside of it.",
  "lmodal-4": "The aria-label and role attributes are used to indicate the nature of the dialog and provide additional contextual information for assistive technology users.",
  "aria-modal": "Accessibility error window",
  "aria-language": "Change language",
  "aria-step": "Tutorial window",
  "aria-previous": "previous step button",
  "aria-next": "next step button",
  "aria-start": "start button",
  "aria-fastAccess": "Go to main content",
  "aria-language-button": "Language button",
  "aria-dark-mode": "Dark mode button",
  "aria-switch": "Toggle switch",
  "alt-img-info": "User graphs for the last 7 days",
  "alt-img-fonct": "W3C Home",
  "alt-img-details": "Bar chart showing monthly and total visitors for the first quarter 2014 for sites 1 to 3",
  "img-deco": "Decorative image",
  "img-info": "Informative image",
  "img-fonct": "Functional image",
  "img-text": "Image of text",
  "img-details": "Detailed image",
  "sur": "of",
  "Étape": "Step"
}
